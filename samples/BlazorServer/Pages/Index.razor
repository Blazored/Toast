@page "/"
@using Blazored.Toast.Configuration;
@inject IToastService toastService
@inject NavigationManager NavigationManager

<h1>Blazored Toasts</h1>
<div>
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
    <button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("I'm a SUCCESS message with a custom heading"))">Success Toast</button>
    <button class="btn btn-warning" @onclick="@(() => toastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
    <button class="btn btn-danger" @onclick="@(() => toastService.ShowError("I'm an ERROR message"))">Error Toast</button>
    <button class="btn btn-info" @onclick="@OnShowHtml">Info Toast with HTML</button>
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("Click to refresh the page", options => options.OnClick = () => NavigationManager.NavigateTo("/", true)))">
        Info Toast with custom action on click
    </button>
</div>
<div class="mt-2">
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("When you hover over me, I will pause the timeout progress and resume it once you move away", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; }))">Pause progress on hover</button>
    <button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("When you hover over me, I will stop the timeout progress and close after an extended timeout of 1 second", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; settings.ExtendedTimeout = 1;}))">Pause progress on hover with extended timeout</button>
</div>
<hr />


<h1>Blazored Toasts - Custom Component</h1>

<button class="btn btn-primary" @onclick="@(() => toastService.ShowToast<MyToastComponent>(settings => { settings.Timeout = 5; settings.ShowProgressBar = true; }))">Custom Toast</button>
<button class="btn btn-secondary" @onclick="@(() => toastService.ShowToast<MyToastComponent>(_toastParameters, settings => { settings.Timeout = 5; settings.ShowProgressBar = false; }))">Custom Toast with parameters</button>
<hr />


<h1>Blazored Toasts - Remove Toasts</h1>

<button class="btn btn-primary" @onclick="ClearAll">Clear All Toasts</button>
<button class="btn btn-warning" @onclick="ClearWarnings">Clear Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearInfos">Clear Info Toasts</button>
<button class="btn btn-secondary" @onclick="ClearCustom">Clear Custom Toasts</button>
<hr />

<h1>Blazored Toasts - Remove queued Toasts</h1>

<button class="btn btn-primary" @onclick="ClearQueue">Clear all queued Toasts</button>
<button class="btn btn-warning" @onclick="ClearQueueWarnings">Clear queued Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearQueueInfos">Clear queued Info Toasts</button>

<hr />
<h1>Blazored Toasts - Close toast with instance.Close()</h1>
<div>
    <button class="btn btn-primary" @onclick="AddNewToast">Add new toast</button>
    <button class="btn btn-primary" @onclick="AddNewCustomToast">Add new custom toast</button>
    @if (toastInstanceList.Any())
    {
        @foreach (var item in toastInstanceList.OrderBy(x => x.Key))
        {
            <div class="d-flex m-2">
                <span class="col-3 align-self-center border-bottom">@item.Value.Id</span>
                <button class="btn btn-danger btn-sm col-1 border-bottom" @onclick="@(() => CloseInstance(item))">Close @item.Key</button>
            </div>
        }
    }
</div>

@code
{
    private ToastParameters _toastParameters;
    private Dictionary<int, ToastInstance> toastInstanceList { get; set; } = new();
    private int toastNumber;


    protected override void OnInitialized()
    {
        _toastParameters = new ToastParameters();
        _toastParameters.Add(nameof(MyToastComponent.Title), "I'm a custom toast component with parameters");
        _toastParameters.Add(nameof(MyToastComponent.ToastParam), "I'm a parameter");
    }

    private void OnShowHtml()
    {
        RenderFragment message =@<text>I'm an <em>INFO</em> message with some <strong>bold</strong> text</text>
    ;
        toastService.ShowToast(ToastLevel.Info, message);
    }

    private void AddNewToast()
    {
        toastNumber++;
        var instance = toastService.ShowInfo($"#{toastNumber} You can close me from code behind", settings => { settings.DisableTimeout = true; });
        toastInstanceList.Add(toastNumber, instance);

        InvokeAsync(StateHasChanged);
    }

    private void AddNewCustomToast()
    {
        toastNumber++;
        var _toastParams = new ToastParameters();
        _toastParams.Add(nameof(MyToastComponent.Title), $"#{toastNumber} I'm a custom toast component with parameters");
        var instance = toastService.ShowToast<MyToastComponent>(_toastParams, settings => { settings.DisableTimeout = true; });
        toastInstanceList.Add(toastNumber, instance);

        InvokeAsync(StateHasChanged);
    }

    private void CloseInstance(KeyValuePair<int, ToastInstance> item)
    {
        item.Value.Close();
        toastInstanceList.Remove(item.Key);

        InvokeAsync(StateHasChanged);
    }

    private void ClearAll()
        => toastService.ClearAll();

    private void ClearWarnings()
        => toastService.ClearToasts(ToastLevel.Warning);

    private void ClearInfos()
        => toastService.ClearInfoToasts();

    private void ClearCustom()
        => toastService.ClearCustomToasts();

    private void ClearQueue()
        => toastService.ClearQueue();

    private void ClearQueueWarnings()
        => toastService.ClearQueueToasts(ToastLevel.Warning);

    private void ClearQueueInfos()
        => toastService.ClearQueueInfoToasts();
}
