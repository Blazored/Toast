@page "/"
@using Blazored.Toast.Configuration
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Blazored Toast Samples</PageTitle>

<h1>Blazored Toasts</h1>

<button class="btn btn-info" id="InfoButton" @onclick="@(() => ToastService.ShowInfo("I'm an INFO message", settings => settings.IconType = IconType.None))">Info Toast</button>
<button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("I'm an INFO message", settings => { settings.IconType = IconType.None; settings.DisableTimeout = true; }))">Info Toast without timeout</button>
<button class="btn btn-success" id="SuccessButton" @onclick="@(() => ToastService.ShowSuccess("I'm a SUCCESS message with a lot of text to see what a toast looks like when it's really big."))">Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => ToastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
<button class="btn btn-danger" @onclick="@(() => ToastService.ShowError("I'm an ERROR message"))">Error Toast</button>
<button class="btn btn-info" @onclick="@OnShowHtml">Info Toast with HTML</button>
<button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("Click to refresh the page",  settings => settings.OnClick = () => NavigationManager.NavigateTo("/", true)))">
    Info Toast with custom action on click
</button>
<div class="mt-2">
    <button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("When you hover me i will stop timeout progress and will continue after you move mouse out", settings => {settings.PauseProgressOnHover = true;}))">Paused progress on hover</button>
    <button class="btn btn-success" @onclick="@(() => ToastService.ShowSuccess("When you hover me i will stop timeout progress and will close after 1 sec", settings => {settings.PauseProgressOnHover = true; settings.ExtendedTimeout = 1;}))">Paused progress on hover with extended timeout</button>
</div>
<hr />

<h1>Blazored Toasts - Custom Component</h1>

<button class="btn btn-primary" @onclick="@(() => ToastService.ShowToast<MyToastComponent>(settings => { settings.Timeout = 5; settings.ShowProgressBar = false; }))">Custom Toast</button>
<button class="btn btn-secondary" id="CustomButton" @onclick="@(() => ToastService.ShowToast<MyToastComponent>(_toastParameters, settings => { settings.Timeout = 5; settings.ShowProgressBar = true; }))">Custom Toast with parameters</button>
<hr />

<h1>Blazored Toasts - Remove Toasts</h1>

<button class="btn btn-primary" @onclick="ClearAll">Clear All Toasts</button>
<button class="btn btn-warning" @onclick="ClearWarnings">Clear Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearInfos">Clear Info Toasts</button>
<button class="btn btn-secondary" @onclick="ClearCustom">Clear Custom Toasts</button>
<hr />

<h1>Blazored Toasts - Remove queued Toasts</h1>

<button class="btn btn-primary" @onclick="ClearQueue">Clear all queued Toasts</button>
<button class="btn btn-warning" @onclick="ClearQueueWarnings">Clear queued Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearQueueInfos">Clear queued Info Toasts</button>

@code
{
    private ToastParameters _toastParameters = default!;

    protected override void OnInitialized()
    {
        _toastParameters = new ToastParameters()
            .Add(nameof(MyToastComponent.Title), "I'm a custom toast component with parameters")
            .Add(nameof(MyToastComponent.ToastParam), "I'm a parameter");
    }

    private void OnShowHtml()
    {
        RenderFragment message = @<text>I'm an <em>INFO</em> message with some <strong>bold</strong> text</text>;
        ToastService.ShowToast(ToastLevel.Info, message);
    }

    private void ClearAll()
        => ToastService.ClearAll();

    private void ClearWarnings()
        => ToastService.ClearToasts(ToastLevel.Warning);

    private void ClearInfos()
        => ToastService.ClearInfoToasts();

    private void ClearCustom()
        => ToastService.ClearCustomToasts();

    private void ClearQueue()
        => ToastService.ClearQueue();

    private void ClearQueueWarnings()
        => ToastService.ClearQueueToasts(ToastLevel.Warning);

    private void ClearQueueInfos()
        => ToastService.ClearQueueInfoToasts();
}
